'''
Anthony Olvera
CSCI 4502
Data Mining Project
Predicting Adverse Drug Reactions Based on Patient Demographics
Apriori Algorithm Implementation

This script will run the apriori algorithm on the preprocessed file 
patient_info.csv generated by Data_Dreprocessing.py script

'''

# Import all nessasary utilities
import numpy as np
import pandas as pd
from pandas.io.json import json_normalize
import scipy.stats as stats

# Import the file
patient_info = pd.read_csv('patient_info.csv')

# Implement the apriori algorithm

# Experiment with this values
min_support = 0.2

def create_C1(data_frame): # function to create 1 itemset of each distinct data entry
    C1 = []
    for row in data_frame.index: # loop over each row in the data frame
        for column_value in data_frame.iloc[[row]]: # loop over each entry per row
            if(not [data_frame.iloc[row][column_value]] in C1): # in data not already in set  
                C1.append([data_frame.iloc[row][column_value]]) # then add it
    return list(map(frozenset, C1)) #use frozen set so we can use it as a key in a dict

def scan_data(data_frame, Ck, min_support): # function to run succesive scans of the data
    ssCnt = {}
    data_frame = list(map(set, data_frame.as_matrix()));
    for row in data_frame: # loop over each data object
        for candidate in Ck:
            if candidate.issubset(row):
                if not candidate in ssCnt:
                    ssCnt[candidate] = 1
                else:
                    ssCnt[candidate] += 1
    num_items = float(len(data_frame))
    ret_list = []
    support_data = {}
    for key in ssCnt:
        support = ssCnt[key]/num_items
        if support >= min_support:
            ret_list.insert(0, key)
        support_data[key] = support
    return ret_list, support_data

def apriori_gen(Fk, k): # generate next successive candidate set of size k
    candidate_set = []  # helper funtion for main function below 
    for i in range(len(Fk)): # loop over current frequent itemset Fk 
        for j in range(i+1, len(Fk)):  
            F1 = list(Fk[i])[:k-2] 
            F2 = list(Fk[j])[:k-2]
            if F1 == F2: # if first k-2 elements are equal
                candidate_set.append(Fk[i] | Fk[j]) # set union
    return candidate_set

def apriori(data_frame, min_support): # returns all frequent itemsets that meet the minimum support
    C1 = create_C1(data_frame) # create itemset of all unique data 
    F1, sup_data = scan_data(data_frame, C1, min_support) # call scan_data on C1
    F = [F1]
    k = 2
    while (len(F[k-2]) > 0):
        Ck = apriori_gen(F[k-2], k)
        Fk, sup_k = scan_data(data_frame, Ck, min_support)#scan DB to get Lk
        sup_data.update(sup_k)
        F.append(Fk)
        k += 1
    return F, sup_data

F, sup_data = apriori(patient_info, min_support);                 